/**
 * Bristlecone Test Tools for Databases
 * Copyright (C) 2006-2014 Continuent Inc.
 * Contact: bristlecone@lists.forge.continuent.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of version 2 of the GNU General Public License as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 *
 * Initial developer(s): Linas Virbalas and Robert Hodges
 * Contributor(s):
 */

package com.continuent.bristlecone.benchmark.db;

/**
 * Vertica DBMS dialect information.
 * 
 * @author rhodges
 */
public class SqlDialectForRedshift extends SqlDialectForPostgreSQL
{
    /** Return the PostgreSQL driver for Redshift. */
    public String getDriver()
    {
        return "org.postgresql.Driver";
    }

    /** Returns true if the JDBC URL looks like a Vertica URL. */
    public boolean supportsJdbcUrl(String url)
    {
        return url.startsWith("jdbc:postgresql");
    }

    /**
     * PostgreSQL uses "serial" datatype for autoincrement but does not have a
     * keyword
     */
    public String implementationAutoIncrementKeyword()
    {
        // This should not be called or we will generate bad syntax.
        throw new Error(
                "Bug: Redshift dialect should not use autoincrement keyword");
    }

    /**
     * Extends the standard type names to accommodate specialized unsigned types
     * generated by DBMS like MySQL.
     */
    public String implementationTypeName(int type)
    {
        switch (type)
        {
            // Any unsigned integer is assigned to bigint.
            case AdditionalTypes.UTINYINT :
            case AdditionalTypes.UNTINYINT :
            case AdditionalTypes.USMALLINT :
            case AdditionalTypes.UNSMALLINT :
            case AdditionalTypes.UMEDIUMINT :
            case AdditionalTypes.UNMEDIUMINT :
            case AdditionalTypes.UINT :
            case AdditionalTypes.UNINT :
                return "bigint";
                // Unsigned bigint is assigned to numeric to avoid overflow.
            case AdditionalTypes.UBIGINT :
            case AdditionalTypes.UNBIGINT :
                return "numeric(38)";
            case java.sql.Types.CLOB :
                return "varchar";
            case java.sql.Types.TIME :
                return "varchar";
            default :
                return super.implementationTypeName(type);
        }
    }
}